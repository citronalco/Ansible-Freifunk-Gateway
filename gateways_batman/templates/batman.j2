# {{ ansible_managed }}

# Batman Interface
# - Erstellt das virtuelle Interface fuer das Batman-Modul und bindet dieses, falls L2TP oder Fastd benutzt wird, an die Netzwerkbruecke
# - Die unten angelegte Routing-Tabelle wird spaeter fuer das Routing innerhalb von Freifunk (Router/VPN) verwendet

{% for item in domaenenliste|dictsort %}
auto bat{{item[0]}}
iface bat{{item[0]}} inet static
        address {{domaenen[item[0]].ffv4_network | ansible.utils.ipaddr(item[1].server_id) | ansible.utils.ipaddr('address') }}
        netmask {{domaenen[item[0]].ffv4_network | ansible.utils.ipaddr('netmask')}}
{% if item[0] | length > 2 %}
        hwaddress f2:be:ef:{{item[0][0:2]}}:{{item[0][2:]}}:{{ "{:02}".format(item[1].server_id) }}
{% else %}
        hwaddress f2:be:ef:00:{{item[0]}}:{{ "{:02}".format(item[1].server_id) }}
{% endif %}
        pre-up modprobe batman-adv
        pre-up ip link add bat{{item[0]}} type batadv
        post-up ip link set dev bat{{item[0]}} up
        post-up batctl -m bat{{item[0]}} it 10000
        post-up batctl -m bat{{item[0]}} gw server {{batman.downstream}}/{{batman.upstream}}
        post-up batctl -m bat{{item[0]}} mm 0
{% if tunneldigger is defined or fastd is defined %}
        post-up batctl -m bat{{item[0]}} if add br{{item[0]}} ||:
{% endif %}
{% for host in groups['gateways'] %}
{% if host != inventory_hostname %}
{% if hostvars[host].domaenenliste is defined %}
{% for item2 in hostvars[host].domaenenliste|dictsort %}
{% if item[0] == item2[0] %}
        post-up batctl -m bat{{item[0]}} if add t{{item[0]}}-{{host}} ||:
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
        post-up ip rule add from all fwmark 0x1 table ffnet pref 16000 ||:
        post-up ip rule add iif bat{{item[0]}} table ffnet pref 16000 ||:
        post-up ip rule add iif lo lookup ffnet suppress_prefixlength 0 pref 16500 ||:
        post-up ip rule add from {{ domaenen[item[0]].ffv4_network }} lookup ffnet pref 16000 ||:
        post-down ip rule del from all fwmark 0x1 table ffnet ||:
        post-down ip rule del iif bat{{item[0]}} table ffnet ||:
        post-down ip rule del iif lo lookup ffnet suppress_prefixlength 0 ||:
        post-down ip rule del from {{ domaenen[item[0]].ffv4_network }} lookup ffnet ||:

iface bat{{item[0]}} inet6 static
        address {{domaenen[item[0]].ffv6_network | ansible.utils.ipaddr(item[1].server_id) | ansible.utils.ipaddr('address') }}
        netmask {{domaenen[item[0]].ffv6_network | ansible.utils.ipaddr('prefix')}}
{% for v6_ad_network in domaenen[item[0]].ffv6_additional_networks %}
	up ip -6 addr add {{v6_ad_network | ansible.utils.ipaddr(item[1].server_id) | ansible.utils.ipaddr('address') }}/{{v6_ad_network | ansible.utils.ipaddr('prefix')}} dev bat{{item[0]}} ||:
{% endfor %}
        post-up ip -6 rule add from all fwmark 0x1 table ffnet pref 16000 ||:
        post-up ip -6 rule add iif bat{{item[0]}} table ffnet pref 16000 ||:
        post-up ip -6 rule add iif lo lookup ffnet suppress_prefixlength 0 pref 16500 ||:
        post-up ip -6 rule add from {{ domaenen[item[0]].ffv6_network }} lookup ffnet pref 16000 ||:
{% for v6_ad_network in domaenen[item[0]].ffv6_additional_networks %}
        post-up ip -6 rule add from {{ v6_ad_network }} lookup ffnet pref 16000 ||:
{% endfor %}
{% for v6_ad_network in domaenen[item[0]].ffv6_additional_networks %}
	down ip -6 addr del {{v6_ad_network | ansible.utils.ipaddr(item[1].server_id) | ansible.utils.ipaddr('address') }}/{{v6_ad_network | ansible.utils.ipaddr('prefix')}} dev bat{{item[0]}} ||:
{% endfor %}
        post-down ip -6 rule del from all fwmark 0x1 table ffnet ||:
        post-down ip -6 rule del iif bat{{item[0]}} table ffnet ||:
        post-down ip -6 rule del iif lo lookup ffnet suppress_prefixlength 0 ||:
        post-down ip -6 rule del from {{ domaenen[item[0]].ffv6_network }} lookup ffnet ||:
{% for v6_ad_network in domaenen[item[0]].ffv6_additional_networks %}
        post-down ip -6 rule del from {{ v6_ad_network }} lookup ffnet ||:
{% endfor %}
{% endfor %}
